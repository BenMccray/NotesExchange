{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { io } from \"socket.io-client\";\nconst URL = \"http://localhost:8080\"; //might be wrong, test and drop \"/chat\"\n\nexport function useSocket(chatId) {\n  _s();\n  const socket = useRef;\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    if (!chatId) {\n      return;\n    }\n    const sock = io(`${URL}`, {\n      path: \"/chat\",\n      query: {\n        chatId: chatId\n      },\n      transports: [\"websocket\"],\n      withCredentials: true\n    });\n    sock.on(\"message\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n    setSocket(sock);\n    return () => {\n      sock.disconnect();\n    };\n  }, [chatId]);\n  const sendMessage = message => {\n    if (socket) {\n      socket.emit(\"message\", {\n        chatId,\n        message\n      });\n    }\n  };\n  return {\n    messages,\n    sendMessage\n  };\n}\n_s(useSocket, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");","map":{"version":3,"names":["useEffect","useState","useRef","io","URL","useSocket","chatId","_s","socket","messages","setMessages","sock","path","query","transports","withCredentials","on","message","prev","setSocket","disconnect","sendMessage","emit"],"sources":["C:/Users/benmccray/Projects/jmu-notes-exchange/client/src/hooks/useSocket.js"],"sourcesContent":["import {useEffect, useState, useRef} from \"react\";\r\nimport {io} from \"socket.io-client\";\r\n\r\nconst URL = \"http://localhost:8080\" //might be wrong, test and drop \"/chat\"\r\n\r\nexport function useSocket(chatId) {\r\n    const socket = useRef;\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!chatId) {\r\n            return \r\n        }\r\n        const sock = io(`${URL}`,\r\n            {\r\n                path: \"/chat\",\r\n                query: {chatId: chatId},\r\n                transports: [\"websocket\"],\r\n                withCredentials: true\r\n            }\r\n        );\r\n    \r\n    \r\n        sock.on(\"message\", (message) => {\r\n            setMessages((prev) => [...prev, message]);\r\n        })\r\n    \r\n        setSocket(sock);\r\n    \r\n        return () => {\r\n            sock.disconnect();\r\n        }\r\n    }, [chatId]);\r\n\r\n    const sendMessage = (message) => {\r\n        if (socket) {\r\n            socket.emit(\"message\", {chatId, message});\r\n        }\r\n    };\r\n\r\n    return {messages, sendMessage};\r\n}"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAO,OAAO;AACjD,SAAQC,EAAE,QAAO,kBAAkB;AAEnC,MAAMC,GAAG,GAAG,uBAAuB,EAAC;;AAEpC,OAAO,SAASC,SAASA,CAACC,MAAM,EAAE;EAAAC,EAAA;EAC9B,MAAMC,MAAM,GAAGN,MAAM;EACrB,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACM,MAAM,EAAE;MACT;IACJ;IACA,MAAMK,IAAI,GAAGR,EAAE,CAAC,GAAGC,GAAG,EAAE,EACpB;MACIQ,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE;QAACP,MAAM,EAAEA;MAAM,CAAC;MACvBQ,UAAU,EAAE,CAAC,WAAW,CAAC;MACzBC,eAAe,EAAE;IACrB,CACJ,CAAC;IAGDJ,IAAI,CAACK,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;MAC5BP,WAAW,CAAEQ,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEFE,SAAS,CAACR,IAAI,CAAC;IAEf,OAAO,MAAM;MACTA,IAAI,CAACS,UAAU,CAAC,CAAC;IACrB,CAAC;EACL,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAEZ,MAAMe,WAAW,GAAIJ,OAAO,IAAK;IAC7B,IAAIT,MAAM,EAAE;MACRA,MAAM,CAACc,IAAI,CAAC,SAAS,EAAE;QAAChB,MAAM;QAAEW;MAAO,CAAC,CAAC;IAC7C;EACJ,CAAC;EAED,OAAO;IAACR,QAAQ;IAAEY;EAAW,CAAC;AAClC;AAACd,EAAA,CApCeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}